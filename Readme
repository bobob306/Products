Hi,

I've tried to strike a balance in my comments between informative and too much.

I've gone for a very clean and fairly basic app architecture so that you can see how I code, rather than including loads of features which to be honest would also be just as standard as the architecture.

I've filled the database using a file hosted on amazonws, this is just because it is something I think you mentioned in the interview

Just for a list of techniques/elements I've used
Dependency injection with dagger hilt
    -   implements a RESTful API to take data from network
    -   provides reusable components that can be used throughout application with as few specific parts as possible
    -   the way it is setup means if there is some data cached the app will work offline
MVVM architecture with repository
    -   to communicate between the ui and the data stored in the database
    -   viewmodel per fragment
    -   communication between viewmodels using savedStateHandle
DataBinding
    -   to fill the ui with updating data from the viewmodel
Fragments in activities
    -   as the ui with navigation and data passing between fragments
Room Database
    -   to store, access and manipulate data
Preferences manager
    -   to store preferences expressed in the ui between the app opening and closing

On the design side, I haven't added many comments because there isn't a lot to say because you can just see it so easily!
Gone for a card design instead of a row layout
In a row layout I would include a little bit of the desc and use a short function to include the first 50-100 chars.
I like to have rounded corners on my cards
I haven't made many other style choices

